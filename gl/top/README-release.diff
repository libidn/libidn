--- ../gnulib/top/README-release	2021-01-06 19:46:44.493509128 +0100
+++ README-release	2022-06-25 21:40:43.006038595 +0200
@@ -2,13 +2,25 @@
 
 * Start from a clean, up-to-date git directory on "master":
 
-    make -k maintainer-clean || { ./configure && make maintainer-clean; }
     git checkout master
     git pull origin master
+    git clean -d -x -f
+    git reset --hard
 
 * Ensure that the latest stable versions of autoconf, automake, etc.
-  are in your PATH.  See the buildreq list in bootstrap.conf for
-  the complete list of tools.
+  are in your PATH.  See the buildreq list in bootstrap.conf for the
+  complete list of tools.
+
+* Ensure that all significant changes since the last release (use
+  "make review-diff") are reflected in NEWS.
+
+* Ensure that you have incremented the LT_* variables in configure.ac
+  properly.  The sc_libtool_version_bump "make syntax-check" rule
+  should catch this.
+
+* Ensure that you have updated STRINGPREP_VERSION in lib/stringprep.h
+  for the current release.  The tests/tst_version self-check should
+  catch this.
 
 * Ensure that you have no uncommitted diffs.  This should produce no
   output:
@@ -19,18 +31,18 @@
 
     git push origin master
 
-* Check that the NixOS/Hydra autobuilder is reporting all is well:
+* Check that the GitLab autobuilder is reporting all is well:
 
-    https://hydra.nixos.org/project/gnu/@PACKAGE@-master
+    https://gitlab.com/libidn/libidn/-/pipelines
 
 * Run the following command to download any new translations:
 
-    ./bootstrap && ./configure
+    ./bootstrap
+    ./configure --enable-java --enable-gtk-doc-pdf
 
 * Pre-release testing: ensure that the following commands succeed:
 
-    c=check ve=check-very-expensive; git grep -q "^$ve:\$" && c=$ve
-    make $c syntax-check distcheck
+    make check syntax-check distcheck
 
 * To (i) set the date, version number, and release TYPE on line 3 of
   NEWS, (ii) commit that, and (iii) tag the release, run
@@ -49,9 +61,12 @@
   it builds and passes all tests.
 
 * While that's happening, write the release announcement that you will
-  soon post.  Start with the template, $HOME/announce-@PACKAGE@-X.Y
+  soon post.  Start with the template, $HOME/announce-libidn-X.Y
   that was just created by that "make" command.
 
+* Increment STRINGPREP_VERSION in lib/stringprep.h and LT_REVISION in
+  configure.ac for the next release.
+
 Once all the builds and tests have passed,
 
 * Run the gnupload command that was suggested by your "make release"
@@ -68,28 +83,6 @@
     v=$(cat .prev-version)
     git push origin master tag v$v
 
-* Announce it on Savannah first, so you can include the savannah.org
-  announcement link in the email message.
-
-  Go to the news-submission form:
-
-    https://savannah.gnu.org/news/submit.php?group=@PACKAGE@
-
-  If it does not work, then enable "News" for the project via this link:
-
-    https://savannah.gnu.org/project/admin/editgroupfeatures.php?group=@PACKAGE@
-
-  Write something like the following:
-
-    Subject: @PACKAGE@-X.Y released [stable]
-    +verbatim+
-    ...paste the announcement here...
-    -verbatim-
-
-  Then go here to approve it:
-
-    https://savannah.gnu.org/news/approve.php?group=@PACKAGE@
-
 * Send the announcement email message.
 
 * After each non-alpha release, run
@@ -98,4 +91,4 @@
 
   to update the on-line manual accessible at
 
-    https://www.gnu.org/software/@PACKAGE@/manual/
+    https://www.gnu.org/software/libidn/manual/
