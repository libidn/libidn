# Copyright (C) 2020-2024 Simon Josefsson
#
# This file is part of GNU Libidn.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

variables:
  GIT_DEPTH: 100 # must include last release tag for git describe
  GNULIB_URL: https://gitlab.com/libidn/gnulib-mirror.git

stages:
- quick
- build
- repro
- test

default:
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
    - ./**/*.log
    - ./out/$CI_JOB_NAME_SLUG/**

.gnulib-fetch:
  script:
  - GNULIB_REVISION=$(. bootstrap.conf; echo $GNULIB_REVISION)
  - wget -nv https://gitlab.com/libidn/gnulib-mirror/-/archive/$GNULIB_REVISION/gnulib-mirror-$GNULIB_REVISION.tar.gz
  - gzip -cd gnulib-mirror-$GNULIB_REVISION.tar.gz | tar xf -
  - rm -fv gnulib-mirror-$GNULIB_REVISION.tar.gz
  - export GNULIB_SRCDIR=$PWD/gnulib-mirror-$GNULIB_REVISION

Q-Debian-testing:
  tags: [ saas-linux-medium-amd64 ]
  image: debian:testing-slim
  stage: quick
  before_script:
  - cat /etc/os-release
  - grep '????-??-??' NEWS > /dev/null || (test -z "$CI_COMMIT_BRANCH" && test -n "$CI_COMMIT_TAG")
  - date | tee date.log
  - set | tee set.log
  - time apt-get update
  - time apt-get install -y git wget make autoconf automake libtool autopoint gperf gengetopt indent codespell libidn-dev | tee pkgs.log | tail
  script:
  - env srcdir=tests tests/standalone.sh
  - time apt-get remove -y --purge libidn-dev | tail
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - mkdir -pv q
  - cd q
  - time ../configure --disable-doc --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check VERBOSE=t V=1
  - make V=1 srcdist
  - git status
  - git diff --exit-code # nothing should change version controlled files
  - env srcdir=../tests STANDALONE_CFLAGS="-I../lib -Ilib lib/.libs/libidn.a" ../tests/standalone.sh
  - env srcdir=../tests STANDALONE_CFLAGS="-I../lib -Ilib -Wl,-rpath lib/.libs lib/.libs/libidn.so" ../tests/standalone.sh
  - sha256sum *.tar.*
  - mkdir -pv ../out/$CI_JOB_NAME_SLUG/{src,log}
  - find config.h *.log tests/*.log -exec mv -v {} ../out/$CI_JOB_NAME_SLUG/log/ \;
  - find ../out/$CI_JOB_NAME_SLUG/log/*.log -exec mv {} {}.txt \;
  - mv -v *-src.tar.* ../out/$CI_JOB_NAME_SLUG/src/

# https://docs.gitlab.com/ee/user/application_security/sast/
sast:
  stage: quick
  variables:
    SAST_EXCLUDED_PATHS: gnulib
include:
  - template: Jobs/SAST.gitlab-ci.yml

# https://www.synopsys.com/blogs/software-security/integrating-coverity-scan-with-gitlab-ci/
Coverity:
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true"
  - when: manual
  image: debian:testing-slim
  stage: build
  allow_failure: true
  before_script:
  - time apt-get update -y
  - time apt-get install -y curl git wget make autoconf automake libtool autopoint gperf gengetopt codespell | tee pkgs.log | tail
  script:
  - test -n "$COVERITY_SCAN_TOKEN" && test -n "$COVERITY_SCAN_PROJECT_NAME"
  - curl -o /tmp/cov-analysis-linux64.tgz https://scan.coverity.com/download/linux64
    --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
  - sha1sum /tmp/cov-analysis-linux64.tgz
  - tar xfz /tmp/cov-analysis-linux64.tgz
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings=error --disable-doc CFLAGS="-g -Og"
  - cov-analysis-linux64-*/bin/cov-build --dir cov-int make -j$(nproc) check
  - tar cfz cov-int.tar.gz cov-int
  - curl https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
    --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
    --form file=@cov-int.tar.gz --form version="`git describe --tags`"
    --form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID"
  artifacts:
    expire_in: 1 week
    paths:
      - cov-int/*.txt

.almarocky: &almarocky
  stage: build
  tags: [ saas-linux-medium-amd64 ]
  variables:
    PKGS: patch diffutils autoconf automake libtool gettext-devel git wget perl make gperf gengetopt transfig texinfo help2man gtk-doc valgrind mono-core texinfo-tex texlive
  before_script:
  - cat /etc/os-release
  - time dnf install -y epel-release
  - time dnf --enablerepo=$(dnf repolist --all | grep crb > /dev/null && echo crb || echo powertools) install -y ${PKGS} | tee pkgs.log | tail
  - gcc --version
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings=error
  - time make syntax-check
  - time make -j$(nproc) V=1 VERBOSE=t check
  - time make -j$(nproc) V=1 VERBOSE=t distcheck
  - git status
  - git diff --exit-code
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* out/$CI_JOB_NAME_SLUG/

B-AlmaLinux8:
  image: almalinux:8
  extends: .almarocky

B-RockyLinux8:
  image: rockylinux:8
  extends: .almarocky

B-AlmaLinux9:
  image: almalinux:9
  extends: .almarocky

B-RockyLinux9:
  image: rockylinux:9
  extends: .almarocky

.pureosdebian: &pureosdebian
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless patch | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git status
  - git diff --exit-code
  - time apt-get install -y -q gpg gpgv
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* out/$CI_JOB_NAME_SLUG/

B-PureOS10:
  image: pureos/byzantium:latest
  extends: .pureosdebian

B-Debian11:
  image: debian:11-slim
  extends: .pureosdebian

B-Trisquel11:
  image: docker.io/kpengboy/trisquel:11.0
  stage: build
  before_script:
  - cat /etc/os-release
  - time apt-get update -y
  - time apt-get install -y make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --no-git
  - mkdir ../b
  - cd ../b
  - time ../libidn/configure --enable-java --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = $' Makefile > /dev/null
  - grep '^HAVE_MONO = 1$' Makefile > /dev/null
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git -C ../libidn status
  - git -C ../libidn diff --exit-code
  - time apt-get install -y -q gpg gpgv
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git -C ../libidn checkout -B cibranch
  - git -C ../libidn config user.email "pipeline@example.org"
  - git -C ../libidn config user.name "Pipeline Builder"
  - git -C ../libidn config user.signingkey pipeline@example.org
  - |
    pushd ../libidn && \
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git -C ../libidn commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi && popd
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git -C ../libidn diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv ../libidn/out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} ../libidn/out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* ../libidn/out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* ../libidn/out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* ../libidn/out/$CI_JOB_NAME_SLUG/

B-Ubuntu2204:
  image: ubuntu:22.04
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig dotnet8 gperf default-jdk-headless patch codespell datefudge | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - ./bootstrap --no-git
  - mkdir b
  - cd b
  - time datefudge "15 years" ../configure --enable-java --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = 1$' Makefile > /dev/null
  - grep '^HAVE_MONO = $' Makefile > /dev/null
  - time datefudge "15 years" make -j$(nproc) syntax-check exclude_file_name_regexp--sc_copyright_check='version-etc.c|doc/libidn.texi'
  - time datefudge "15 years" make -j$(nproc) check V=1 VERBOSE=t
  - time datefudge "15 years" make -j$(nproc) distcheck
  - git status
  - git diff --exit-code
  - time apt-get install -y -q gpg gpgv
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    pushd ../ && \
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi && popd
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv ../out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} ../out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* ../out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* ../out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* ../out/$CI_JOB_NAME_SLUG/

B-Ubuntu2404-arm64:
  image: ubuntu:24.04
  tags: [ saas-linux-small-arm64 ]
  stage: build
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig dotnet8 gperf default-jdk-headless patch codespell indent | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = 1$' Makefile > /dev/null
  - grep '^HAVE_MONO = $' Makefile > /dev/null
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git status
  - git diff --exit-code
  - time apt-get install -y -q gpg gpgv
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* out/$CI_JOB_NAME_SLUG/

B-Ubuntu2404:
  image: ubuntu:24.04
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig dotnet8 gperf default-jdk-headless patch codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error --disable-silent-rules
  - grep '^HAVE_DOTNET = 1$' Makefile > /dev/null
  - grep '^HAVE_MONO = $' Makefile > /dev/null
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git status
  - git diff --exit-code # nothing should change version controlled files
  - time apt-get install -y -q gpg gpgv
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* out/$CI_JOB_NAME_SLUG/

B-Alpine-arm64:
  image: alpine:latest
  tags: [ saas-linux-small-arm64 ]
  stage: build
  before_script:
  - cat /etc/os-release
  - apk update
  - apk add gcc make libc-dev git wget autoconf automake libtool gettext-dev gperf gengetopt patch coreutils
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --disable-doc --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-Alpine-mold:
  image: alpine:latest
  tags: [ saas-linux-small-arm64 ]
  stage: build
  before_script:
  - cat /etc/os-release
  - apk update
  - apk add gcc make libc-dev git wget autoconf automake libtool gettext-dev gperf gengetopt patch coreutils mold
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --disable-doc --enable-gcc-warnings=error CC='cc -fuse-ld=mold'
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files
  - (! grep -E 'mold. warning' build.log)
  - grep 'mold ' lib/.libs/libidn.so

B-Debian9:
  image: docker.io/debian/eol:stretch-slim
  stage: build
  before_script:
  - printf "deb http://archive.debian.org/debian/ stretch main\ndeb http://archive.debian.org/debian/ stretch-backports main\ndeb http://archive.debian.org/debian-security/ stretch/updates main\n" > /etc/apt/sources.list # https://github.com/debuerreotype/docker-debian-eol-artifacts/issues/10
  - time apt-get update -y
  - time apt-get install -y make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-generic-recommended texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) dist
  - time make -j$(nproc) syntax-check
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/src out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* out/$CI_JOB_NAME_SLUG/

B-Debian12:
  image: debian:bookworm-slim
  stage: build
  before_script:
  - time apt-get update
  - time apt-get install -y -q make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless wget | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check VERBOSE=t
  - time make -j$(nproc) dist
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/src out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* out/$CI_JOB_NAME_SLUG/

B-Debian-testing:
  image: debian:testing-slim
  stage: build
  before_script:
  - time apt-get update -qq
  - time apt-get install -y -q make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - make -j$(nproc) install
  - time apt-get install -y -qq man
  - git clone --depth=1 https://salsa.debian.org/debian/libidn.git debian-libidn
  - debian-libidn/debian/tests/idn
  - debian-libidn/debian/tests/libidn
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/src out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* out/$CI_JOB_NAME_SLUG/

B-Fedora-latest:
  image: fedora:latest
  stage: build
  before_script:
  - cat /etc/os-release
  - time dnf update -y
  - time dnf install -y make git wget patch autoconf automake libtool gettext-devel cvs texinfo texinfo-tex texlive help2man gtk-doc gengetopt dblatex valgrind gperf java-latest-openjdk-devel mono-devel codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/src out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* out/$CI_JOB_NAME_SLUG/

B-Guix:
  image: registry.gitlab.com/debdistutils/guix/container:latest
  stage: build
  before_script:
  - cp -rL /gnu/store/*profile/etc/* /etc/
  - echo 'root:x:0:0:root:/:/bin/sh' >> /etc/passwd
  - groupadd --system guixbuild
  - for i in $(seq -w 1 10); do useradd -g guixbuild -G guixbuild -d /var/empty -s $(command -v nologin) -c "Guix build user $i" --system guixbuilder$i; done
  - export HOME=/
  - env LANG=C.UTF-8 guix-daemon --build-users-group=guixbuild &
  - guix archive --authorize < /share/guix/ci.guix.gnu.org.pub
  - guix archive --authorize < /share/guix/bordeaux.guix.gnu.org.pub
  - guix describe
  - time guix install --verbosity=0 gcc-toolchain libtool gengetopt gperf perl patch sed findutils autoconf automake make grep m4  gawk gettext tar xz diffutils python help2man pkgconf pkg-config python-codespell indent mono # gtk-doc texinfo fig2dev
  - GUIX_PROFILE="//.guix-profile"
  - . "$GUIX_PROFILE/etc/profile"
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --disable-doc --enable-gcc-warnings=error
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - make V=1 srcdist
  - git diff --exit-code # nothing should change version controlled files
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/

B-DebianGuix:
  image: registry.gitlab.com/debdistutils/guix/container:debian-with-guix-amd64
  stage: build
  before_script:
  - GUIX_PROFILE=/root/.config/guix/current; . "$GUIX_PROFILE/etc/profile"
  - guix describe
  - env LC_ALL=C.UTF-8 guix-daemon --build-users-group=_guixbuild &
  - time apt-get install -qqy --no-install-recommends texlive texlive-plain-generic texlive-extra-utils | tee pkgs.log | tail
  - time guix install git gcc-toolchain libtool gengetopt gperf perl patch sed findutils autoconf automake make grep m4 gawk gettext xz tar gzip diffutils python help2man pkgconf pkg-config indent gtk-doc texinfo fig2dev gnupg wget openjdk:jdk mono # texlive python-codespell
  - GUIX_PROFILE="/root/.guix-profile"
  - . "$GUIX_PROFILE/etc/profile"
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = $' Makefile > /dev/null
  - grep '^HAVE_MONO = 1$' Makefile > /dev/null
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck V=1 VERBOSE=t
  - git status
  - git diff --exit-code
  - gpg --batch --passphrase '' --quick-gen-key pipeline@example.org
  - git checkout -B cibranch
  - git config user.email "pipeline@example.org"
  - git config user.name "Pipeline Builder"
  - git config user.signingkey pipeline@example.org
  - |
    if grep '????-??-??' NEWS > /dev/null; then
      sed -i '3i * Noteworthy changes in release ?.? (????-??-??) [?]\n\n** WARNING This release was prepared automatically with no testing.\n' NEWS
      sed -i -e 's,STRINGPREP_VERSION ".*",STRINGPREP_VERSION "17.42.23",' lib/stringprep.h
      git commit -m "Warn about automatic release." NEWS lib/stringprep.h
      relver='17.42.23'
      reltyp='alpha'
    else # maintainer ran release-commit
      relver=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\1/p' | head -1)
      reltyp=$(cat NEWS | sed -n -e 's/.*release \([0-9.]\+\) (....-..-..) \[\(.*\)\].*/\2/p' | head -1)
    fi
  - test "$relver" != "17.42.23" || make release-commit RELEASE="$relver $reltyp"
  - make release RELEASE="$relver $reltyp" V=1 VERBOSE=t
  - cat -n ~/announce-*
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/{src,rel,log}
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - test "$relver" != "17.42.23" || mv -v *17.42.23* out/$CI_JOB_NAME_SLUG/rel/
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* ~/announce-* out/$CI_JOB_NAME_SLUG/

# https://docs.gitlab.com/ee/ci/runners/hosted_runners/macos.html
B-MacOS14Xcode15:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  stage: build
  image: macos-14-xcode-15
  tags: [ saas-macos-medium-m1 ]
  variables:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_UPGRADE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    WERROR_CFLAGS: "-Wno-error=format-nonliteral -Wno-error=format-security"
  before_script:
  - brew install wget autoconf automake libtool gengetopt help2man texinfo fig2dev coreutils
  script:
  - PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"; export PATH
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings=error
  - make -j$(nproc) syntax-check
  - make -j$(nproc) check -k V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-Ubuntu-rolling:
  image: ubuntu:rolling
  stage: build
  before_script:
  - cat /etc/os-release
  - time apt-get update
  - time apt-get install -y make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git diff --exit-code # nothing should change version controlled files
  - sha256sum *.tar.*
  - mkdir -pv out/$CI_JOB_NAME_SLUG/src out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *-src.tar.* out/$CI_JOB_NAME_SLUG/src/
  - mv -v *.tar.* out/$CI_JOB_NAME_SLUG/

B-clang:
  image: silkeh/clang:latest
  stage: build
  before_script:
  - clang --version
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs help2man gengetopt gperf | tee pkgs.log | tail
  script:
  - clang --version
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure CC="clang -std=gnu2x" --enable-gcc-warnings=error --disable-doc
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-gcc:
  image: gcc:latest
  stage: build
  before_script:
  - gcc --version
  - cat /etc/os-release
  - time apt-get update -qqy
  - time apt-get install -qqy --no-install-recommends make git wget autoconf automake libtool gettext autopoint cvs help2man valgrind gengetopt gperf | tee pkgs.log | tail
  script:
  - gcc --version
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure CC="gcc -std=gnu2x" --enable-gcc-warnings=error --disable-doc
  - time make -j$(nproc) V=1
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

# https://docs.gitlab.com/ee/ci/runners/hosted_runners/windows.html
B-Windows-UCRT64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ saas-windows-medium-amd64 ]
  stage: build
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=format-security -Wno-error=suggest-attribute=format"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'UCRT64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu git wget autoconf automake libtool make mingw-w64-ucrt-x86_64-gcc gtk-doc help2man gengetopt gperf patch gettext-devel
    GNULIB_REVISION=$(. bootstrap.conf; echo $GNULIB_REVISION)
    wget -nv https://gitlab.com/libidn/gnulib-mirror/-/archive/$GNULIB_REVISION/gnulib-mirror-$GNULIB_REVISION.tar.gz
    tar xfa gnulib-mirror-$GNULIB_REVISION.tar.gz
    rm -fv gnulib-mirror-$GNULIB_REVISION.tar.gz
    export GNULIB_SRCDIR=gnulib-mirror-$GNULIB_REVISION
    ./bootstrap --skip-po --no-git
    ./configure --enable-gcc-warnings=error --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS tests/tst_idna.log'

0-compare:
  image: alpine:latest
  stage: repro
  needs: [ Q-Debian-testing, B-AlmaLinux8, B-AlmaLinux9, B-RockyLinux8, B-RockyLinux9, B-Trisquel11, B-Ubuntu2204, B-PureOS10, B-Debian11, B-Debian9, B-Debian12, B-Debian-testing, B-Guix, B-DebianGuix, B-Fedora-latest, B-Ubuntu-rolling, B-Ubuntu2404-arm64, B-Ubuntu2404, R-Trisquel10, R-Ubuntu2004 ]
  script:
  - cd out
  - sha256sum */*.tar.* */*/*.tar.* | sort | grep    -- -src.tar.
  - sha256sum */*.tar.* */*/*.tar.* | sort | grep -v -- -src.tar.
  - sha256sum */*.tar.* */*/*.tar.* | sort | uniq -c -w64 | sort -rn
  - sha256sum */*.tar.* */*/*.tar.* | grep    -- -src.tar. | sort | uniq -c -w64 | grep -v '^      1 '
  - sha256sum */*.tar.* */*/*.tar.* | grep -v -- -src.tar. | sort | uniq -c -w64 | grep -v '^      1 '
  - cmp b-almalinux8/src/*.tar.gz b-almalinux9/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-debian-testing/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-debian12/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-rockylinux8/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-rockylinux9/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-ubuntu-rolling/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-ubuntu2404-arm64/src/*.tar.gz
  - cmp b-almalinux8/src/*.tar.gz b-ubuntu2404/src/*.tar.gz
  - cmp b-debian11/src/*.tar.gz b-debian9/src/*.tar.gz
  - cmp b-debian11/src/*.tar.gz b-pureos10/src/*.tar.gz
  - cmp b-almalinux8/*.tar.gz b-rockylinux8/*.tar.gz
  - cmp b-almalinux9/*.tar.gz b-rockylinux9/*.tar.gz
  - cmp b-pureos10/*.tar.gz b-debian11/*.tar.gz
  - cmp b-trisquel11/*.tar.gz b-ubuntu2204/*.tar.gz
  - cmp b-trisquel11/src/*.tar.gz b-ubuntu2204/src/*.tar.gz
  - cmp b-ubuntu2404-arm64/*.tar.gz b-ubuntu2404/*.tar.gz
  - cmp r-trisquel10/*.tar.gz r-ubuntu2004/*.tar.gz
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
    - ./out/**

R-Trisquel10:
  tags: [ saas-linux-medium-amd64 ]
  image: docker.io/kpengboy/trisquel:10.0
  stage: repro
  needs: [Q-Debian-testing]
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -y --no-install-recommends make git wget ca-certificates autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell datefudge patch | tee pkgs.log | tail
  script:
  - mkdir -pv ../b
  - cd ../b
  - tar xfz ../libidn/out/q-debian-testing/src/libidn-*.tar.gz
  - cd $(tar tfa ../libidn/out/q-debian-testing/src/libidn-*.tar.gz | head -n1)
  - GNULIB_REVISION=$(. bootstrap.conf; echo $GNULIB_REVISION)
  - wget -nv https://gitlab.com/libidn/gnulib-mirror/-/archive/$GNULIB_REVISION/gnulib-mirror-$GNULIB_REVISION.tar.gz
  - gzip -cd gnulib-mirror-$GNULIB_REVISION.tar.gz | tar xf -
  - rm -fv gnulib-mirror-$GNULIB_REVISION.tar.gz
  - export GNULIB_SRCDIR=gnulib-mirror-$GNULIB_REVISION
  - time datefudge "5 years" ./bootstrap --skip-po --no-git
  - time datefudge "5 years" ./configure --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = $' Makefile > /dev/null
  - grep '^HAVE_MONO = 1$' Makefile > /dev/null
  - time datefudge "5 years" make -j$(nproc) syntax-check exclude_file_name_regexp--sc_copyright_check='version-etc.c|doc/libidn.texi'
  - time datefudge "5 years" make -j$(nproc) check V=1 VERBOSE=t
  - time datefudge "5 years" make -j$(nproc) distcheck
  - sha256sum *.tar.*
  - mkdir -pv ../../libidn/out/$CI_JOB_NAME_SLUG/src ../../libidn/out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} ../out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *.tar.* ../../libidn/out/$CI_JOB_NAME_SLUG/

R-Ubuntu2004:
  tags: [ saas-linux-medium-amd64 ]
  image: ubuntu:20.04
  stage: repro
  needs: [Q-Debian-testing]
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -y --no-install-recommends make git wget ca-certificates autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell datefudge patch | tee pkgs.log | tail
  script:
  - tar xfz out/q-debian-testing/src/libidn-*.tar.gz
  - cd $(tar tfa out/q-debian-testing/src/libidn-*.tar.gz | head -n1)
  - GNULIB_REVISION=$(. bootstrap.conf; echo $GNULIB_REVISION)
  - wget -nv https://gitlab.com/libidn/gnulib-mirror/-/archive/$GNULIB_REVISION/gnulib-mirror-$GNULIB_REVISION.tar.gz
  - gzip -cd gnulib-mirror-$GNULIB_REVISION.tar.gz | tar xf -
  - rm -fv gnulib-mirror-$GNULIB_REVISION.tar.gz
  - export GNULIB_SRCDIR=gnulib-mirror-$GNULIB_REVISION
  - time datefudge "5 years ago" ./bootstrap --skip-po --no-git
  - time datefudge "5 years ago" ./configure --enable-gcc-warnings=error
  - grep '^HAVE_DOTNET = $' Makefile > /dev/null
  - grep '^HAVE_MONO = 1$' Makefile > /dev/null
  - time datefudge "5 years ago" make -j$(nproc) syntax-check exclude_file_name_regexp--sc_copyright_check='version-etc.c|doc/libidn.texi'
  - time datefudge "5 years ago" make -j$(nproc) check V=1 VERBOSE=t
  - time datefudge "5 years ago" make -j$(nproc) distcheck
  - sha256sum *.tar.*
  - mkdir -pv ../out/$CI_JOB_NAME_SLUG/log
  - find config.h *.log tests/*.log -exec mv -v {} ../out/$CI_JOB_NAME_SLUG/log \;
  - mv -v *.tar.* ../out/$CI_JOB_NAME_SLUG/

AlmaLinux8:
  image: almalinux:8
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time dnf -y install make gcc diffutils valgrind | tee pkgs.log | tail
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

AlmaLinux10:
  image: almalinux:10-kitten
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc diffutils valgrind gzip
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

AlmaLinux10-clang:
  image: almalinux:10-kitten
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make clang diffutils valgrind gzip
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure CC=clang --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

AlmaLinux10-arm64:
  image: almalinux:10-kitten
  tags: [ saas-linux-small-arm64 ]
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc diffutils valgrind gzip
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

AlmaLinux10-ppc64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ ppc64 ]
  image: almalinux:10-kitten
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc diffutils valgrind gzip
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Alpine-mold:
  image: alpine:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - apk update
  - apk add build-base mold
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral"
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error CC='cc -fuse-ld=mold'
  - make -j$(nproc) check V=1 VERBOSE=t 2>&1 | tee build.log
  - (! grep -E 'mold. warning' build.log)
  - grep 'mold ' lib/.libs/libidn.so

ArchLinux:
  image: archlinux:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - pacman -Syu --noconfirm make gcc diffutils
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - time ../configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Armcross:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time apt-get update -qq
  - time apt-get install -y -qq make gcc-arm-linux-gnueabi qemu-user qemu-user-binfmt file binfmt-support | tee pkgs.log | tail
  - update-binfmts --enable qemu-arm
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error --host=arm-linux-gnueabi CFLAGS="-static --static"
  - make -j$(nproc) V=1
  - file src/idn
  - LANG=C.UTF-8 qemu-arm src/idn --debug foo
  - time make -k -j$(nproc) check V=1 VERBOSE=t

OracleLinux7:
  image: oraclelinux:7
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - yum -y install make gcc diffutils valgrind
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Debian3:
  image: debian/eol:woody
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time apt-get update
  - time apt-get install -y -qq make gcc libc-dev
  script:
  - tar xfz out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfz out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings
  - time make check V=1 VERBOSE=t

Debian3.1:
  image: debian/eol:sarge
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time apt-get update
  - time apt-get install -y -qq make gcc libc-dev
  script:
  - tar xfz out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfz out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make check V=1 VERBOSE=t

Debian4:
  image: debian/eol:etch
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time apt-get update
  - time apt-get install -y -qq make gcc libc-dev
  script:
  - tar xfz out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfz out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make check V=1 VERBOSE=t

Debian10:
  image: debian:10-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - time apt-get update
  - time apt-get install -y -qq make gcc
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - time ../configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Debian12-ppc64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ ppc64 ]
  image: debian:12
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - time apt-get update
  - time apt-get install -y -qq make gcc
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - time ../configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Fedora-latest:
  image: fedora:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - dnf -y install make gcc diffutils valgrind
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Guix:
  image: registry.gitlab.com/debdistutils/guix/container:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cp -rL /gnu/store/*profile/etc/* /etc/
  - echo 'root:x:0:0:root:/:/bin/sh' >> /etc/passwd
  - groupadd --system guixbuild
  - for i in $(seq -w 1 10); do useradd -g guixbuild -G guixbuild -d /var/empty -s $(command -v nologin) -c "Guix build user $i" --system guixbuilder$i; done
  - export HOME=/
  - env LANG=C.UTF-8 guix-daemon --build-users-group=guixbuild &
  - guix archive --authorize < /share/guix/ci.guix.gnu.org.pub
  - guix archive --authorize < /share/guix/bordeaux.guix.gnu.org.pub
  - guix describe
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Mingw32:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dpkg --add-architecture i386
  - time apt-get update -qq
  - time apt-get install -y -qq make mingw-w64 wine wine32 libwine libwine:i386 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=format-security -Wno-error=suggest-attribute=format"
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - time ../configure --enable-gcc-warnings=error --host=i686-w64-mingw32 CC='i686-w64-mingw32-gcc -static-libgcc'
  - time make -k -j$(nproc) check V=1 VERBOSE=t

Mingw64:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - time apt-get update -qq
  - time apt-get install -y -qq make mingw-w64 wine wine64 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=format-security -Wno-error=suggest-attribute=format"
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - mkdir b
  - cd b
  - time ../configure --enable-gcc-warnings=error --host=x86_64-w64-mingw32
  - time make -k -j$(nproc) check V=1 VERBOSE=t

OpenBSD:
  tags: [ "openbsd" ]
  allow_failure: true
  needs: [B-Trisquel11]
  stage: test
  before_script:
  - uname -a
  - sysctl hw
  script:
  - tar xfz out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfz out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make check V=1 VERBOSE=t

RockyLinux9-ppc64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ ppc64 ]
  image: rockylinux:9
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - dnf -y install make gcc valgrind
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu12.04:
  image: ubuntu:12.04
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - perl -pi -e 's/archive.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
  - time apt-get update -q
  - time apt-get install -y -qq make gcc valgrind
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu14.04:
  image: ubuntu:14.04
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -y -qq make gcc valgrind
  script:
  - mkdir -pv ../p
  - cd ../p
  - tar xfa ../libidn/out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa ../libidn/out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --disable-tld --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu-rolling:
  image: ubuntu:rolling
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - cat /etc/os-release
  - time apt-get update -qq
  - time apt-get install -y -qq git make gcc valgrind gtk-doc-tools texinfo texlive texlive-plain-generic
  script:
  - tar xfa out/b-trisquel11/libidn-*.tar.gz
  - cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
  - time ./configure --enable-gcc-warnings=error
  - time make -j$(nproc) check V=1 VERBOSE=t
  - make -j$(nproc) distcheck

Windows-MSYS:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ saas-windows-medium-amd64 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=attributes -Wno-error=format-nonliteral -Wno-error=format-security"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MSYS' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make gcc
    tar xfa out/b-trisquel11/libidn-*.tar.gz
    cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
    ./configure --enable-gcc-warnings=error --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS libidn-*/tests/tst_idna.log'

Windows-MINGW64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ saas-windows-medium-amd64 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=unused-value -Wno-error=format-nonliteral -Wno-error=format-security -Wno-error=suggest-attribute=format"
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MINGW64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make mingw-w64-x86_64-gcc
    tar xfa out/b-trisquel11/libidn-*.tar.gz
    cd $(tar tfa out/b-trisquel11/libidn-*.tar.gz | head -n1)
    ./configure --enable-gcc-warnings=error --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'
  - C:\msys64\usr\bin\bash -lc 'grep ^PASS libidn-*/tests/tst_idna.log'

macOS13Xcode14:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: macos-13-xcode-14
  tags: [ saas-macos-medium-m1 ]
  stage: test
  needs: [B-Trisquel11]
  variables:
    WERROR_CFLAGS: "-Wno-error=format-nonliteral -Wno-error=format-security"
  script:
  - gzip -cd out/b-trisquel11/libidn-*.tar.gz | tar xf -
  - cd $(gzip -cd out/b-trisquel11/libidn-*.tar.gz | tar tf - | head -n1)
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings=error
  - make -j$(nproc) syntax-check
  - make -j$(nproc) V=1 check -k VERBOSE=t

.pages:
  image: debian:testing-slim
  stage: build
  before_script:
  - time apt-get update -qq
  - time apt-get install -y -q make git wget autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless codespell | tee pkgs.log | tail
  script:
  - !reference [.gnulib-fetch, script]
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-gcc-warnings=error --enable-java --enable-gtk-doc --enable-gtk-doc-pdf
  - time make V=1
  - mkdir -p public
  - rm -rf public/reference
  - mv doc/reference/html public/reference
  - make web-manual
  - rm -rf public/manual
  - mv doc/manual public/manual
  artifacts:
    when: on_success
    paths:
      - public

pages:
  extends: .pages
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pages-test:
  extends: .pages
  rules:
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
