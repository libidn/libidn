# Copyright (C) 2020-2022 Simon Josefsson
#
# This file is part of GNU Libidn.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

stages:
 - quick
 - build
 - test

.test:
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
    - "*-*.tar.gz"
    - ./*.log
    - ./**/*.log

Quick-Debian-testing:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-quick-Debian-testing
  stage: quick
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --disable-doc
  - time make syntax-check
  - time make V=1
  - time make check VERBOSE=t V=1

# https://www.synopsys.com/blogs/software-security/integrating-coverity-scan-with-gitlab-ci/
Coverity:
  image: $CI_REGISTRY/libidn/build-images:libidn-quick-Debian-testing
  stage: build
  only:
    refs:
      - master
      - coverity
  allow_failure: true
  before_script:
  - apt-get update -qq -y
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -q curl
  script:
  - test -n "$COVERITY_SCAN_TOKEN" && test -n "$COVERITY_SCAN_PROJECT_NAME"
  - curl -o /tmp/cov-analysis-linux64.tgz https://scan.coverity.com/download/linux64
    --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
  - sha1sum /tmp/cov-analysis-linux64.tgz
  - tar xfz /tmp/cov-analysis-linux64.tgz
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings --disable-doc CFLAGS="-g -Og"
  - cov-analysis-linux64-*/bin/cov-build --dir cov-int make check -j$(nproc)
  - tar cfz cov-int.tar.gz cov-int
  - curl https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
    --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
    --form file=@cov-int.tar.gz --form version="`git describe --tags`"
    --form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID"
  artifacts:
    expire_in: 1 week
    paths:
      - cov-int/*.txt

# https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
sast:
  stage: quick
  variables:
    SAST_EXCLUDED_PATHS: gnulib
include:
- template: Security/SAST.gitlab-ci.yml

Alpine:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-quick-Alpine
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --disable-doc
  - time make syntax-check
  - time make V=1 VERBOSE=t
  - time make check V=1 VERBOSE=t

Debian11:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian11
  stage: build
  before_script:
  - apt-get update
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq wget
  script:
  - time ./bootstrap --no-git
  - time ./configure --enable-java
  - time make syntax-check
  - time make check V=1 VERBOSE=t
  - time make dist

Debian10:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian10
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java
  - time make check V=1 VERBOSER=t
  - time make dist

Debian9:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian9
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java
  - time make check V=1 VERBOSE=t
  - time make dist
  - time make syntax-check

Debian testing:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian-testing
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java
  - time make check V=1 VERBOSE=t
  - time make distcheck
  - make install
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq man
  - git clone --depth=1 https://salsa.debian.org/debian/libidn.git debian-libidn
  - debian-libidn/debian/tests/idn
  - debian-libidn/debian/tests/libidn

Fedora latest:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Fedora-latest
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java
  - time make check V=1 VERBOSE=t
  - time make distcheck

Ubuntu latest:
  extends: .test
  image: $CI_REGISTRY/libidn/build-images:libidn-Ubuntu-latest
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java
  - time make check V=1 VERBOSE=t
  - time make distcheck

B-clang:
  extends: .test
  image: silkeh/clang:15-bullseye
  stage: build
  before_script:
  - apt-get update -qq
  - apt-get install -qqy --no-install-recommends make git autoconf automake libtool gettext autopoint cvs texinfo texlive texlive-plain-generic texlive-extra-utils help2man gtk-doc-tools dblatex valgrind gengetopt transfig mono-mcs gperf default-jdk-headless
  script:
  - ./bootstrap --skip-po
  - ./configure CC="clang-15 -std=gnu2x"
  - make V=1
  - make check V=1 VERBOSE=t
  - git status
  - git diff --exit-code

Debian oldoldstable:
  extends: .test
  image: debian:oldoldstable
  stage: test
  needs: [Debian11]
  before_script:
  - apt-get update
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure
  - time make check V=1 VERBOSE=t

Alpine:
  extends: .test
  image: alpine:latest
  stage: test
  needs: [Debian11]
  before_script:
  - apk update
  - apk add build-base
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t

ArchLinux:
  extends: .test
  image: archlinux:latest
  stage: test
  needs: [Debian11]
  before_script:
  - pacman -Syu --noconfirm make gcc diffutils
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure
  - time make check V=1 VERBOSE=t

Fedora:
  extends: .test
  image: fedora:latest
  stage: test
  needs: [Debian11]
  before_script:
  - dnf -y install make gcc diffutils valgrind
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t

CentOS7:
  extends: .test
  image: centos:7
  stage: test
  needs: [Debian11]
  before_script:
  - yum -y install make gcc diffutils valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t

AlmaLinux:
  extends: .test
  image: almalinux:8
  stage: test
  needs: [Debian11]
  before_script:
  - dnf -y install make gcc diffutils valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t

Ubuntu-12.04:
  extends: .test
  image: ubuntu:12.04
  stage: test
  needs: [Debian11]
  before_script:
  - perl -pi -e 's/archive.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
  - apt-get update -q
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t

Ubuntu-14.04:
  extends: .test
  image: ubuntu:14.04
  stage: test
  needs: [Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure --disable-tld
  - time make check V=1 VERBOSE=t

Ubuntu rolling:
  extends: .test
  image: ubuntu:rolling
  stage: test
  needs: [Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq git make gcc valgrind gtk-doc-tools texinfo texlive texlive-plain-generic
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make check V=1 VERBOSE=t
  - make distcheck

Mingw32:
  extends: .test
  image: debian:latest
  stage: test
  needs: [Debian11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make mingw-w64 wine wine32 libwine libwine:i386 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure --host=i686-w64-mingw32 CC='i686-w64-mingw32-gcc -static-libgcc'
  - time make check V=1 VERBOSE=t

Mingw64:
  extends: .test
  image: debian:latest
  stage: test
  needs: [Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make mingw-w64 wine wine64 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure --host=x86_64-w64-mingw32
  - time make check V=1 VERBOSE=t

Armcross:
  extends: .test
  image: debian:latest
  stage: test
  needs: [Debian11]
  before_script:
  - apt-get update -qq
  - env DEBIAN_FRONTEND=noninteractive apt-get install -y -qq make gcc-arm-linux-gnueabi qemu-user qemu-user-binfmt file
  - update-binfmts --enable qemu-arm
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=arm-linux-gnueabi CFLAGS="-static --static"
  - make V=1
  - file src/idn
  - LANG=C.UTF-8 qemu-arm src/idn --debug foo
  - time make check V=1 VERBOSE=t

.pages:
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian-testing
  stage: build
  script:
  - time ./bootstrap --skip-po --no-git
  - time ./configure --enable-java --enable-gtk-doc --enable-gtk-doc-pdf
  - time make V=1
  - mkdir -p public
  - rm -rf public/reference
  - mv doc/reference/html public/reference
  - make web-manual
  - rm -rf public/manual
  - mv doc/manual public/manual
  artifacts:
    when: on_success
    paths:
      - public

pages:
  extends: .pages
  only:
    - master

pages-test:
  extends: .pages
  except:
    - master
