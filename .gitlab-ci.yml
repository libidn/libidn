# Copyright (C) 2020-2023 Simon Josefsson
#
# This file is part of GNU Libidn.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

variables:
  GIT_DEPTH: 100

stages:
 - quick
 - build
 - test

default:
  interruptible: true
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
    - "*.tar.gz"
    - ./*.log
    - ./config.h
    - ./**/*.log

Q-Debian-testing:
  image: $CI_REGISTRY/libidn/build-images:libidn-mini-Debian-testing
  stage: quick
  script:
  - time ./bootstrap --skip-po
  - time ./configure --disable-doc
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check VERBOSE=t V=1
  - git diff --exit-code # nothing should change version controlled files

# https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
sast:
  stage: quick
  variables:
    SAST_EXCLUDED_PATHS: gnulib
include:
- template: Security/SAST.gitlab-ci.yml

# https://www.synopsys.com/blogs/software-security/integrating-coverity-scan-with-gitlab-ci/
Coverity:
  image: $CI_REGISTRY/libidn/build-images:libidn-mini-Debian-testing
  stage: build
  only:
    refs:
      - master
      - coverity
  allow_failure: true
  before_script:
  - apt-get update -qq -y
  - apt-get install -y -q curl
  script:
  - test -n "$COVERITY_SCAN_TOKEN" && test -n "$COVERITY_SCAN_PROJECT_NAME"
  - curl -o /tmp/cov-analysis-linux64.tgz https://scan.coverity.com/download/linux64
    --form project=$COVERITY_SCAN_PROJECT_NAME --form token=$COVERITY_SCAN_TOKEN
  - sha1sum /tmp/cov-analysis-linux64.tgz
  - tar xfz /tmp/cov-analysis-linux64.tgz
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings --disable-doc CFLAGS="-g -Og"
  - cov-analysis-linux64-*/bin/cov-build --dir cov-int make -j$(nproc) check
  - tar cfz cov-int.tar.gz cov-int
  - curl https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME
    --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL
    --form file=@cov-int.tar.gz --form version="`git describe --tags`"
    --form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID"
  artifacts:
    expire_in: 1 week
    paths:
      - cov-int/*.txt

B-Alpine-arm64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: alpine:latest
  tags: [ arm64 ]
  stage: build
  before_script:
  - apk update
  - apk add gcc make libc-dev git autoconf automake libtool gettext-dev gperf gengetopt patch coreutils
  script:
  - time ./bootstrap --skip-po
  - time ./configure --disable-doc
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-Debian9:
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian9
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) dist
  - time make -j$(nproc) syntax-check
  - git diff --exit-code # nothing should change version controlled files

B-Debian12:
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian12
  stage: build
  before_script:
  - apt-get update
  - apt-get install -y -qq wget
  script:
  - time ./bootstrap
  - time ./configure --enable-java
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) dist
  - git diff --exit-code # nothing should change version controlled files

B-Debian-testing:
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian-testing
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - make -j$(nproc) install
  - apt-get install -y -qq man
  - git clone --depth=1 https://salsa.debian.org/debian/libidn.git debian-libidn
  - debian-libidn/debian/tests/idn
  - debian-libidn/debian/tests/libidn
  - git diff --exit-code # nothing should change version controlled files

B-Fedora-latest:
  image: $CI_REGISTRY/libidn/build-images:libidn-Fedora-latest
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git diff --exit-code # nothing should change version controlled files

B-Trisquel11:
  image: $CI_REGISTRY/libidn/build-images:libidn-Trisquel11
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) dist
  - time make -j$(nproc) syntax-check
  - git diff --exit-code # nothing should change version controlled files

B-Ubuntu-latest:
  image: $CI_REGISTRY/libidn/build-images:libidn-Ubuntu-latest
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java
  - time make -j$(nproc) check V=1 VERBOSE=t
  - time make -j$(nproc) distcheck
  - git diff --exit-code # nothing should change version controlled files

# https://docs.gitlab.com/ee/ci/runners/saas/macos/environment.html
B-MacOS14Xcode15:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  stage: build
  image: macos-14-xcode-15
  tags: [ saas-macos-medium-m1 ]
  variables:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_UPGRADE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
  before_script:
  - brew install autoconf automake libtool gengetopt help2man texinfo fig2dev
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-gcc-warnings
  - make -j$(nproc) syntax-check
  - make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

macOS13Xcode14:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: macos-13-xcode-14
  tags: [ saas-macos-medium-m1 ]
  stage: test
  needs: [B-Trisquel11]
  script:
  - gzip -cd libidn-*.tar.gz | tar xf -
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --enable-gcc-warnings
  - make -j$(nproc) syntax-check
  - make -j$(nproc) V=1 check VERBOSE=t

B-clang:
  image: silkeh/clang:latest
  stage: build
  before_script:
  - clang --version
  - apt-get update -qq
  - apt-get install -qqy --no-install-recommends make git autoconf automake libtool gettext autopoint cvs help2man gengetopt gperf
  script:
  - clang --version
  - time ./bootstrap --skip-po
  - time ./configure CC="clang -std=gnu2x" --enable-gcc-warnings --disable-doc
  - time make -j$(nproc) V=1
  - time make -j$(nproc) check V=1 VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

B-gcc:
  image: gcc:latest
  stage: build
  before_script:
  - gcc --version
  - apt-get update -qqy
  - apt-get install -qqy --no-install-recommends make git autoconf automake libtool gettext autopoint cvs help2man valgrind gengetopt gperf
  script:
  - gcc --version
  - time ./bootstrap --skip-po
  - time ./configure CC="gcc -std=gnu2x" --enable-gcc-warnings --disable-doc
  - time make -j$(nproc) V=1
  - time make -j$(nproc) syntax-check
  - time make -j$(nproc) check VERBOSE=t
  - git diff --exit-code # nothing should change version controlled files

# https://docs.gitlab.com/ee/ci/runners/saas/windows_saas_runner.html
B-Windows-UCRT64:
  when: manual # FAIL: tst_stringprep: stringprep() entry 0 failed: 201, FAIL: tst_idna: IDNA entry 0 failed: 1, FAIL: tst_idna2: IDNA2 entry 0 failed: 1, FAIL: tst_idna3: IDNA3[0] failed
  tags: [ shared-windows, windows-1809 ]
  stage: build
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'UCRT64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu git autoconf automake libtool make mingw-w64-ucrt-x86_64-gcc gtk-doc help2man gengetopt gperf patch gettext-devel
    ./bootstrap --skip-po
    ./configure --enable-gcc-warnings --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'

Windows-MSYS:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  tags: [ shared-windows, windows-1809 ]
  stage: test
  needs: [B-Trisquel11]
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MSYS' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make gcc
    tar xfa libidn-*.tar.gz
    cd `ls -d libidn-* | grep -v tar.gz`
    ./configure --enable-gcc-warnings --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'

Windows-MINGW64:
  when: manual # FAIL: tst_stringprep: stringprep() entry 0 failed: 201
  tags: [ shared-windows, windows-1809 ]
  stage: test
  needs: [B-Trisquel11]
  script: # https://www.msys2.org/docs/ci/#other-systems
  - wget.exe -nv -O msys2.exe https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe
  - ./msys2.exe -y -oC:\
  - Remove-Item msys2.exe
  - $env:CHERE_INVOKING = 'yes'
  - $env:MSYSTEM = 'MINGW64' # https://www.msys2.org/docs/environments/
  - C:\msys64\usr\bin\bash -lc ' '
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
  - |
    C:\msys64\usr\bin\bash -lcx '
    pacman --noconfirm -Syu make mingw-w64-x86_64-gcc
    tar xfa libidn-*.tar.gz
    cd `ls -d libidn-* | grep -v tar.gz`
    ./configure --enable-gcc-warnings --disable-doc
    make -j$(nproc) V=1 -k check VERBOSE=t'

AlmaLinux:
  image: almalinux:8
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc diffutils valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t

Alpine:
  image: alpine:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apk update
  - apk add build-base
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t

ArchLinux:
  image: archlinux:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - pacman -Syu --noconfirm make gcc diffutils
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure
  - time make -j$(nproc) check V=1 VERBOSE=t

CentOS7:
  image: centos:7
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - yum -y install make gcc diffutils valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t

Debian10:
  image: debian:10-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update
  - apt-get install -y -qq make gcc
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure
  - time make -j$(nproc) check V=1 VERBOSE=t

Fedora-latest:
  image: fedora:latest
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc diffutils valgrind
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu12.04:
  image: ubuntu:12.04
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - perl -pi -e 's/archive.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list
  - apt-get update -q
  - apt-get install -y -qq make gcc valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu14.04:
  image: ubuntu:14.04
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq make gcc valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure --disable-tld
  - time make -j$(nproc) check V=1 VERBOSE=t

Ubuntu-rolling:
  image: ubuntu:rolling
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq git make gcc valgrind gtk-doc-tools texinfo texlive texlive-plain-generic
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure
  - time make -j$(nproc) check V=1 VERBOSE=t
  - make -j$(nproc) distcheck

RockyLinux9-ppc64:
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - when: manual
  image: rockylinux:9
  tags: [ ppc64 ]
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dnf -y install make gcc valgrind
  script:
  - tar xfa libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - time ./configure --enable-gcc-warnings
  - time make -j$(nproc) check V=1 VERBOSE=t

Mingw32:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - dpkg --add-architecture i386
  - apt-get update -qq
  - apt-get install -y -qq make mingw-w64 wine wine32 libwine libwine:i386 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure --host=i686-w64-mingw32 CC='i686-w64-mingw32-gcc -static-libgcc'
  - time make -j$(nproc) check V=1 VERBOSE=t

Mingw64:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq make mingw-w64 wine wine64 binfmt-support wine-binfmt
  - update-binfmts --enable wine
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - time ../configure --host=x86_64-w64-mingw32
  - time make -j$(nproc) check V=1 VERBOSE=t

Armcross:
  image: debian:12-slim
  stage: test
  needs: [B-Trisquel11]
  before_script:
  - apt-get update -qq
  - apt-get install -y -qq make gcc-arm-linux-gnueabi qemu-user qemu-user-binfmt file binfmt-support
  - update-binfmts --enable qemu-arm
  script:
  - tar xfz libidn-*.tar.gz
  - cd `ls -d libidn-* | grep -v tar.gz`
  - mkdir b
  - cd b
  - ../configure --host=arm-linux-gnueabi CFLAGS="-static --static"
  - make -j$(nproc) V=1
  - file src/idn
  - LANG=C.UTF-8 qemu-arm src/idn --debug foo
  - time make -j$(nproc) check V=1 VERBOSE=t

.pages:
  image: $CI_REGISTRY/libidn/build-images:libidn-Debian-testing
  stage: build
  script:
  - time ./bootstrap --skip-po
  - time ./configure --enable-java --enable-gtk-doc --enable-gtk-doc-pdf
  - time make V=1
  - mkdir -p public
  - rm -rf public/reference
  - mv doc/reference/html public/reference
  - make web-manual
  - rm -rf public/manual
  - mv doc/manual public/manual
  artifacts:
    when: on_success
    paths:
      - public

pages:
  extends: .pages
  only:
    - master

pages-test:
  extends: .pages
  except:
    - master
